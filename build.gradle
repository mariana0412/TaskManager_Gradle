plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'java'

    tasks.register('myJavadoc', Javadoc) {
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath
        destinationDir = file("${buildDir}/myJavadoc")
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

// -PfilePath="ui/src/main/resources/config.properties"
tasks.register('checkFilePresence') {
    if (!project.hasProperty('filePath'))
        throw new GradleException("The 'filePath' parameter is required.")

    def filePath = project.filePath
    def file = file(filePath)

    if (file.exists())
        println "The file $filePath is present."
    else
        println "The file $filePath is NOT present."
}

tasks.register('createJsonFileIfNeeded') {
    doLast {
        def filePath = "data/src/main/resources/tasks.json"
        def file = file(filePath)

        if(file.createNewFile())
            println "File $filePath was not found. New empty file was created."
        else
            println "File $filePath was found. It was no need in creating it."
    }
}

tasks.register('myJavadoc', Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    destinationDir = file("${buildDir}/myJavadoc")
}

tasks.register('copyJavadoc', Copy) {
    dependsOn subprojects.myJavadoc

    def moduleDirs = ["core", "data", "ui"]
    moduleDirs.each { moduleDir ->
        from fileTree("${moduleDir}/build/myJavadoc/org/mapthree")
    }

    exclude 'package-summary.html'
    exclude 'package-tree.html'

    into file("${buildDir}/combinedJavadoc")
    duplicatesStrategy = DuplicatesStrategy.WARN
}

tasks.register('myBuildTask') {
    dependsOn 'createJsonFileIfNeeded', 'copyJavadoc', 'build'
    println "My task for building this project."
}

test {
    useJUnitPlatform()
}